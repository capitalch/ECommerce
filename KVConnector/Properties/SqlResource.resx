<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChangePasswordHash" xml:space="preserve">
    <value>update UserMaster set PwdHash = @newPwdHash where email = @email and PwdHash = @oldPwdHash</value>
  </data>
  <data name="GetCurrentOffer" xml:space="preserve">
    <value>select id, item,tastingNotes,descr,imageUrl, price, packing, availableQty from OfferMaster;</value>
  </data>
  <data name="GetHashAndRole" xml:space="preserve">
    <value>select id, Role,PwdHash 
	from UserMaster 
		where code = @item;
select adminPwdHash = stringValue
	from Setup
		where MKey = 'adminPwdHash';
select adminIp = stringValue
	from Setup
		where MKey = 'adminIp';</value>
  </data>
  <data name="GetMaxOrderNumber" xml:space="preserve">
    <value>select max(IntValue) from Setup where MKey = 'MaxOrderNumber'</value>
  </data>
  <data name="GetPwdHash" xml:space="preserve">
    <value>select PwdHash from UserMaster where email = @email;</value>
  </data>
  <data name="GetUserIdFromEmail" xml:space="preserve">
    <value>select MAX(Id) from UserMaster where Email = @email;</value>
  </data>
  <data name="GetProfile" xml:space="preserve">
    <value>select id, firstName,lastName, phone, convert(varchar(10), birthDay, 120) as birthDay, mailingAddress1
	, mailingAddress2, mailingCity, mailingState, mailingZip, mailingCountry, co
	from UserProfiles where userId = @userId;</value>
  </data>
  <data name="IsEmailAndHashExist" xml:space="preserve">
    <value>select 0 from UserMaster where Email = @email and PwdHash = @oldPwdHash;</value>
  </data>
  <data name="IsEmailExist" xml:space="preserve">
    <value>select 0 from UserMaster where Email = @email;</value>
  </data>
  <data name="NewPasswordHash" xml:space="preserve">
    <value>update UserMaster set PwdHash = @newPwdHash where code = @code;</value>
  </data>
  <data name="SetMaxOrderNumber" xml:space="preserve">
    <value>update Setup set IntValue = @value where MKey = 'MaxOrderNumber'</value>
  </data>
  <data name="UpdateProfile" xml:space="preserve">
    <value>update UserProfiles 
	set FirstName = @firstName,
	LastName = @lastName,
	Phone = @phone,
	Birthday = @birthDay,
	MailingAddress1 = @mailingAddress1,
	MailingAddress2 = @mailingAddress2,
	MailingCity = @mailingCity,
	MailingState = @mailingState,
	MailingZip = @mailingZip,
	MailingCountry = @mailingCountry,
	IsAddressVerified = @isAddressVerified,
	co = @co
	where Id = @id;</value>
  </data>
  <data name="GetOrderHeaders" xml:space="preserve">
    <value>select id,mDate,orderNo,descr,isDelivered,invoice, amount, salesTaxWine, salesTaxAddl
	, shippingWine, shippingAddl, totalPriceWine, totalPriceAddl
	from orderMaster 
		where UserId=@userId;</value>
  </data>
  <data name="UpdateShippingAddress" xml:space="preserve">
    <value>DECLARE @cnt int;
select @cnt = count(*) from shippingAddresses where UserId = @userId;
if(@cnt=1)
	begin
		select @isDefault = 1;
	end
else
	begin
		if @isDefault = 1
			begin
				update ShippingAddresses
					set IsDefault = 0
						where UserId = @userId;
			end
	end


update ShippingAddresses
	set Code=@code,
	Name=@name,
	Co=@co,
	street1=@street1,
	street2=@street2,
	city=@city,state=@state,zip=@zip,country=@country,
	phone=@phone,
	ISOCode=@isoCode,
	IsDefault=@isDefault,
	IsAddressVerified=@isAddressVerified
	where Id = @id;</value>
  </data>
  <data name="DeletePaymentMethod" xml:space="preserve">
    <value>declare @isDefault bit;
select @isDefault = isDefault 
	from PaymentMethods 
		where id = @id;
if(@isDefault = 1)
	Update t
		Set t.isDefault = 1
		From
		(
			Select Top 1 isDefault
			From PaymentMethods
			Where UserId = @userId
		) t;
delete from PaymentMethods where id = @id;</value>
  </data>
  <data name="GetAllCreditCards" xml:space="preserve">
    <value>select id, cardName,cardNumber, expiryDate, isDefault
	from CreditCards 
		where UserId = @userId;</value>
  </data>
  <data name="GetDefaultShippingAddress" xml:space="preserve">
    <value>select id, address1,a.zip,state,city,
	defaultSalesTaxPerc=(select StringValue from Setup where MKey = 'DefaultSalesTaxPerc'),
	defaultShippingCharges=(select StringValue from Setup where MKey = 'DefaultShippingCharges'),
	b.salesTax, b.shippingCharges
	from ShippingAddresses a left join TaxNShipping b
			on a.zip = b.zip
				where UserId=@userId and IsDefault = 1;</value>
  </data>
  <data name="GetAllShippingAddresses" xml:space="preserve">
    <value>select id,co,code,name,phone,street1,street2,city,state,zip,country,isoCode, isDefault, phone
from ShippingAddresses	
	where UserId=@userId;</value>
  </data>
  <data name="GetDefaultCreditCard" xml:space="preserve">
    <value>select id,cardName,cardNumber,ExpiryDate
	from CreditCards
		where UserId = @userId
			and IsDefault = 1;</value>
  </data>
  <data name="SetDefaultPaymentMethod" xml:space="preserve">
    <value>update PaymentMethods
	set IsDefault = 0
			where UserId=@userId;
update PaymentMethods
	set IsDefault = 1
		where Id = @id;</value>
  </data>
  <data name="InsertCreditCard" xml:space="preserve">
    <value>declare @cnt int;
declare @id int;
insert into CreditCards (CardName,UserId,CardNumber,ExpiryDate)
	values(@cardName,@userId,@cardNumber,@expiryDate);
	SELECT @id = CAST(scope_identity() AS int);
	select @cnt = count(*) from CreditCards
	where userId = @userId;
if(@cnt = 1)
	update CreditCards set IsDefault = 1
		where id = @id;
select(@id);</value>
  </data>
  <data name="GetApproveArtifacts" xml:space="preserve">
    <value>select id, cardName,ccNumber=SUBSTRING(ccNumber,1,4) + ' XXXX XXXX ' + SUBSTRING(ccNumber,(LEN(ccNumber) - 3), 4)
	from PaymentMethods
		where UserId = @userId
			and IsDefault = 1;
select id, name,phone,co,street1,street2,city,state,a.zip, country,isoCode,
	defaultSalesTaxPerc=(select StringValue from Setup where MKey = 'DefaultSalesTaxPerc'),
	defaultShippingCharges=(select StringValue from Setup where MKey = 'DefaultShippingCharges'),
	b.salesTaxPerc, b.shippingCharges
	from ShippingAddresses a left join TaxNShipping b
			on a.zip = b.zip
				where UserId=@userId and IsDefault = 1;

select prevBalanceWine,prevBalanceAddl from UserProfiles where UserId = @userId;

select count = count(*) 
	from PaymentMethods
		where UserId = @userId;</value>
  </data>
  <data name="GetOrderDetails" xml:space="preserve">
    <value>--declare @orderId int;
--select @orderId = 84;
select a.id, item, packing, orderQty, wishList,a.price
	from OrderDetails a join OfferMaster b
		on a.offerId = b.id
			where orderId = @orderId;
select orderImpDetailsId=a.id, b.id, b.name, b.street1, b.street2, b.zip,b.state,b.city, b.co,b.phone,b.country
	from OrderImpDetails a join ShippingAddresses b
		on a.addressId = b.id		
	where orderId = @orderId;
select orderImpDetailsId=a.id,b.id, b.cardName,ccNumber=SUBSTRING(b.ccNumber,1,4) + ' XXXX XXXX ' + SUBSTRING(b.ccNumber,(LEN(a.ccNumber) - 3), 4)
	from OrderImpDetails a 
	left outer join PaymentMethods b
		on a.CreditCardId = b.id
	where orderId = @orderId;</value>
  </data>
  <data name="GetAllMasters" xml:space="preserve">
    <value>select countryId, countryName, isoCode,requiresZip from Countries order by countryName;</value>
  </data>
  <data name="GetAllPaymentMethods" xml:space="preserve">
    <value>select id, cardName,ccFirstName,ccLastName,ccType,ccNumber=SUBSTRING(ccNumber,1,4) + ' XXXX XXXX ' + SUBSTRING(ccNumber,(LEN(ccNumber) - 3), 4),
	ccExpiryMonth,ccExpiryYear,ccSecurityCode,name,phone,street1,street2,city,state,zip,country,isoCode,isDefault
	from PaymentMethods 
		where UserId = @userId;</value>
  </data>
  <data name="GetCodeFromEmail" xml:space="preserve">
    <value>select top 1 code from UserMaster
	where Email=@email
		order by code desc;</value>
  </data>
  <data name="GetEmailFromCode" xml:space="preserve">
    <value>select email from UserMaster where code=@code;</value>
  </data>
  <data name="GetShippingSalesTaxPerc" xml:space="preserve">
    <value>--declare @zip varchar(100);
--declare @bottles int;
--select @zip = 'a';
--select @bottles = 10;
select shipping = 20, salesTaxPerc = 8.5 
	where @zip like'%' and @bottles &gt; 0;</value>
  </data>
  <data name="InsertPaymentMethod" xml:space="preserve">
    <value>declare @cnt int;
declare @id int;
select @cnt = count(*) from PaymentMethods
	where userId = @userId;;

if(@isDefault = 1)
	update PaymentMethods set isDefault = 0
		where userId = @userId;

if(@cnt = 0)
	select @IsDefault = 1;

insert into PaymentMethods (cardName,ccFirstName,ccLastName,ccType,ccNumber,ccExpiryMonth,ccExpiryYear,ccSecurityCode,name,street1,street2,city,state,zip,country,isoCode,phone,isDefault,userId)
	values(@cardName,@ccFirstName,@ccLastName,@ccType,@ccNumber,@ccExpiryMonth,@ccExpiryYear,@ccSecurityCode,@name,@street1,@street2,@city,@state,@zip,@country,@isoCode,@phone,@isDefault,@userId);
	SELECT @id = CAST(scope_identity() AS int);

select(@id);</value>
  </data>
  <data name="InsertShippingAddress" xml:space="preserve">
    <value>--insert
declare @id int;
if @isDefault is null
	select @isDefault = 0;

if @isDefault = 1
begin
	update ShippingAddresses
		set IsDefault = 0
			where UserId = @userId;
end
if not exists(select 0 from ShippingAddresses where UserId = @userId)
	select @isDefault = 1;

insert into ShippingAddresses(Code,Name,Street1,Street2,City,State,Zip,Country,Phone,ISOCode,IsDefault,isAddressVerified,UserId,Co)
	values(@code,@name,@street1,@street2,@city,@state,@zip,@country,@phone,@isoCode,@isDefault,@isAddressVerified,@userID,@co);

SELECT @id = CAST(scope_identity() AS int);
select(@id);</value>
  </data>
  <data name="DeleteShippingAddress" xml:space="preserve">
    <value>delete from ShippingAddresses where id = @id;</value>
  </data>
  <data name="GetDefaultBillingAddressForCard" xml:space="preserve">
    <value>select id, street1, street2, city, state, zip, country, isoCode,phone
	from ShippingAddresses
		where code = @code and isDefault = 1;</value>
  </data>
  <data name="GetLoginPageText" xml:space="preserve">
    <value>select loginPage = Login_Page from SysParms;</value>
  </data>
  <data name="GetNewUserLogin" xml:space="preserve">
    <value>declare @isValidUser bit = 0;
declare @isPwdExists bit = 0;
declare @ret varchar(7);
declare @newUserPageText varchar(MAX);

if exists(select 1 from UserMaster where code=@code and OfferId=@offerId)
	select @isValidUser = 1;
if exists(select 1 from UserMaster where code=@code and OfferId=@offerId 
	and pwdHash is not null and rtrim(pwdHash) != '')
	select @isPwdExists = 1;
if((@isValidUser = 0) and (@isPwdExists = 0)) --invalid user so login
	select @ret = 'login'
else if((@isValidUser = 1) and (@isPwdExists = 1)) --valid user and pwd exists so login
	select @ret='login'
else -- valid user and empty pwd
	select @ret = 'newUser'
select @newUserPageText = newUser_Page from sysParms;
select @ret + '#;' + @newUserPageText;</value>
  </data>
  <data name="GetSettings" xml:space="preserve">
    <value>select smartyStreetApiKey = (select stringValue from setup where MKey = 'SmartyStreetApiKey')
	, smartyStreetAuthId = (select smartyStreetApiKey = stringValue from setup where MKey = 'SmartyStreetAuthId')
	, smartyStreetAuthToken = (select smartyStreetApiKey = stringValue from setup where MKey = 'SmartyStreetAuthToken')
	, creditCardTypes = (select creditCardTypes = stringValue from setup where MKey = 'CreditCardTypes')
	, needHelpText = (select needHelpText = stringValue from setup where mKey = 'NeedHelpText')
	, disableOnlineOrderForm = (select DisableOnlineOrderForm from SysParms)
	, disableOnlineOrderText = (select disableOnlineOrderText = stringValue from setup where mKey ='DisableOnlineOrderText');</value>
  </data>
  <data name="GetUserIdFromCode" xml:space="preserve">
    <value>select id from userMaster where code = @code;</value>
  </data>
  <data name="InsertUserLog" xml:space="preserve">
    <value>Insert into UsrLog(Code,mType) values(@userCode, @mType);</value>
  </data>
  <data name="PaymentMethodsResetDefault" xml:space="preserve">
    <value>update PaymentMethods
	set IsDefault = 0
		where userId = @userId;</value>
  </data>
  <data name="UpdateCardIdInOrderImpDetails" xml:space="preserve">
    <value>update OrderImpDetails
	set CreditCardId = @cardId
		where Id = @OrderImpDetailsId;</value>
  </data>
  <data name="UpdatePwdHash" xml:space="preserve">
    <value>update UserMaster set pwdHash = @hash
	where code=@code;</value>
  </data>
  <data name="UpdateOrderPaymentMethod" xml:space="preserve">
    <value>update OrderImpDetails
	set CreditCardId = @cardId
		where id = @id</value>
  </data>
  <data name="UpdateOrderShippingAddress" xml:space="preserve">
    <value>update OrderImpDetails
	set addressId = @addressId
		where id = @id</value>
  </data>
</root>